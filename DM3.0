#include<bits/stdc++.h>

using namespace std;
const int MAXN = 1e5;
int in[MAXN]; // record the number of degrees
string course[MAXN]; // course
set<int> edges[MAXN]; // lines between courses
map<string, int> c_n; // course and code
int nstu = 0; // the number of student
int n_course = 0; // the number of course
int cnt = 0; // the ans
set<int> cc;
vector<vector<int> > ans;

// process data.
void init() {
    memset(in, -1, sizeof(in));
    fill(course, course + MAXN, "");
    for (auto it : edges) it.clear();
    c_n.clear();
    cc.clear();
    nstu = 0;
    n_course = 0;
    cnt = 0;
    for (auto i : ans) i.clear();
}

// set courses.
void c_set() {
    cout << "Please input the number of courses:";
    cin >> n_course;
    cout << "Please input the name of each course:" << endl;
    for (int i = 0; i < n_course; i++) {
        cin >> course[i];
        c_n[course[i]] = i;
    }
}

// set students.
void stu_c() {
    cout << "Please input the number of students:";
    cin >> nstu;
    for (int i = 0; i < nstu; i++) {
        int n;
        cout << "Please input the number of courses chosen by this student:";
        cin >> n;
        vector<string> v;
        cout << "Please input the courses chosen by this student:" << endl;
        for (int j = 0; j < n; j++) {
            string t;
            cin >> t;
            v.push_back(t);
        }
        for (int j = 0; j < n; j++) {
            for (int k = 0; k < n; k++) {
                if (j != k)
                    edges[c_n[v[j]]].insert(c_n[v[k]]);
            }
        }
    }
    for (int i = 0; i < n_course; i++) {
        int num = c_n[course[i]];
        in[num] = edges[num].size();
    }
}

void del(int &valid, int maxx) {
    in[maxx] = -1;
    valid++;
}

// solve the problem using gather and Welch Powell staining.
void solve() {
    int valid = 0;
    for (int i = 0; i < n_course; i++) cc.insert(i);
    while (valid != n_course) {
        long long num = max_element(in, in + n_course) - in;
        cnt++;
        vector<int> vec;
        del(valid, int(num));
        vec.push_back(num);
        set<int> temp = edges[num];
        temp.insert(num);
        set<int> diff;
        set_difference(cc.begin(), cc.end(), temp.begin(), temp.end(), inserter(diff, diff.begin()));
        while (!diff.empty() && diff.size() < n_course) {
            int maxx = -1;
            for (int it : diff) {
                if (in[it] > maxx) maxx = it;
            }
            if (maxx == -1) break;
            diff.clear();
            del(valid, maxx);
            vec.push_back(maxx);
            set<int> temp1 = edges[maxx];
            temp.insert(maxx);
            set_union(temp.begin(), temp.end(), temp1.begin(), temp1.end(), inserter(temp, temp.end()));
            set_difference(cc.begin(), cc.end(), temp.begin(), temp.end(), inserter(diff, diff.begin()));
        }
        ans.push_back(vec);
    }
}

void print() {
    int t = 1;
    for (const auto &it : ans) {
        cout << t++ << ": ";
        for (auto i : it) {
            cout << course[i] << " ";
        }
        cout << endl;
    }
}

int main() {
    int T;
    cout << "Please input the number of examples:";
    cin >> T;
    while (T--) {
        init();
        c_set();
        stu_c();
        solve();
        cout << "The schedule can be divided into " << cnt << " periods." << endl;
        print();
    }
    return 0;
}
